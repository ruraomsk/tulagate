// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/ami.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AMIClient is the client API for AMI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AMIClient interface {
	// Run функция двухстороннего обмена данными
	Run(ctx context.Context, opts ...grpc.CallOption) (AMI_RunClient, error)
}

type aMIClient struct {
	cc grpc.ClientConnInterface
}

func NewAMIClient(cc grpc.ClientConnInterface) AMIClient {
	return &aMIClient{cc}
}

func (c *aMIClient) Run(ctx context.Context, opts ...grpc.CallOption) (AMI_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &AMI_ServiceDesc.Streams[0], "/proto.AMI/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &aMIRunClient{stream}
	return x, nil
}

type AMI_RunClient interface {
	Send(*RequestRun) error
	Recv() (*ResponseRun, error)
	grpc.ClientStream
}

type aMIRunClient struct {
	grpc.ClientStream
}

func (x *aMIRunClient) Send(m *RequestRun) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aMIRunClient) Recv() (*ResponseRun, error) {
	m := new(ResponseRun)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AMIServer is the server API for AMI service.
// All implementations must embed UnimplementedAMIServer
// for forward compatibility
type AMIServer interface {
	// Run функция двухстороннего обмена данными
	Run(AMI_RunServer) error
	mustEmbedUnimplementedAMIServer()
}

// UnimplementedAMIServer must be embedded to have forward compatible implementations.
type UnimplementedAMIServer struct {
}

func (UnimplementedAMIServer) Run(AMI_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedAMIServer) mustEmbedUnimplementedAMIServer() {}

// UnsafeAMIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AMIServer will
// result in compilation errors.
type UnsafeAMIServer interface {
	mustEmbedUnimplementedAMIServer()
}

func RegisterAMIServer(s grpc.ServiceRegistrar, srv AMIServer) {
	s.RegisterService(&AMI_ServiceDesc, srv)
}

func _AMI_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AMIServer).Run(&aMIRunServer{stream})
}

type AMI_RunServer interface {
	Send(*ResponseRun) error
	Recv() (*RequestRun, error)
	grpc.ServerStream
}

type aMIRunServer struct {
	grpc.ServerStream
}

func (x *aMIRunServer) Send(m *ResponseRun) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aMIRunServer) Recv() (*RequestRun, error) {
	m := new(RequestRun)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AMI_ServiceDesc is the grpc.ServiceDesc for AMI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AMI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AMI",
	HandlerType: (*AMIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _AMI_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ami.proto",
}
